/*
 A binary tree node has data, pointer to left child
   and a pointer to right child 
struct Node
{
    int data;
    Node* left;
    Node* right;
};
*/

/* Function to print nodes of extreme corners
of each level in alternate order */
void printExtremeNodes(Node* root)
{
    queue<Node*> q;
    q.push(root);
    cout<<root->data<<" ";
    int c=1,l=1,x=0,k;
    Node *temp;
    while(!q.empty())
    {
        int f=0;
        while(c--)
        {
            temp=q.front();
            q.pop();
            
            if(temp->left){
              q.push(temp->left);
              x++;
              if(x==1 && l%2!=0)
                cout<<temp->left->data<<" ";
              else if(x>=1 && l%2==0){
                k=temp->left->data;
                f=1;
              }
            }
            if(temp->right){
              q.push(temp->right);
              x++;
             if(x==1 && l%2!=0)
                cout<<temp->right->data<<" ";
              else if(x>=1 && l%2==0){
                 k=temp->right->data; 
                 f=1;}
            }
        }
        if(f==1)
          cout<<k<<" ";
        c=x;
        l++;
        x=0;
    }
}
